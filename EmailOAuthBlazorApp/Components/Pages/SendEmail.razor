@page "/send-email"
@using System.ComponentModel.DataAnnotations
@using EmailOAuthBlazorApp.Services
@inject EmailService EmailService

<h3>Authentification et envoi d'e-mail via Gmail (OAuth2 + MailKit)</h3>

@if (!EmailService.IsAuthenticated())
{
    <div class="mb-3">
        <p>Cliquez sur le lien ci-dessous pour vous authentifier avec Google :</p>
        <a href="@AuthUrl" target="_blank">Ouvrir la page d'authentification Google</a>
    </div>
    <div class="mt-3">
        <p>Après authentification, copiez le paramètre <strong>code</strong> de l'URL et collez-le ci-dessous :</p>
        <InputText @bind-Value="AuthCode" class="form-control" placeholder="Entrez votre code d'autorisation" />
        <button class="btn btn-primary mt-2" @onclick="Authenticate">Valider l'authentification</button>
    </div>
}
else
{
    <div class="alert alert-success">
        Vous êtes authentifié ! Vous pouvez maintenant envoyer un e-mail.
    </div>
    <EditForm Model="@emailModel" OnValidSubmit="OnSendEmail">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label>Adresse e-mail destinataire :</label>
            <InputText @bind-Value="emailModel.RecipientEmail" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Sujet :</label>
            <InputText @bind-Value="emailModel.Subject" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Message :</label>
            <InputTextArea @bind-Value="emailModel.Message" class="form-control" Rows="5" />
        </div>
        <button type="submit" class="btn btn-success">Envoyer l'e-mail</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert alert-info mt-3">@StatusMessage</div>
}

@code {
    private string AuthUrl;
    private string AuthCode;
    private string StatusMessage;

    private EmailModel emailModel = new();

    protected override void OnInitialized()
    {
        // Génère l'URL d'authentification
        AuthUrl = GmailOAuthHelper.GenerateAuthorizationUrl();
    }

    private async Task Authenticate()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(AuthCode))
            {
                StatusMessage = "Veuillez entrer le code d'autorisation.";
                return;
            }

            var credential = await GmailOAuthHelper.ExchangeCodeForTokenAsync(AuthCode);
            EmailService.SetUserCredential(credential);
            StatusMessage = "Authentification réussie ! Vous pouvez maintenant envoyer des e-mails.";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Erreur lors de l'authentification : {ex.Message}";
        }
    }

    private async Task OnSendEmail()
    {
        try
        {
            await EmailService.SendEmailAsync(emailModel.RecipientEmail, emailModel.Subject, emailModel.Message);
            StatusMessage = "E-mail envoyé avec succès !";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Erreur lors de l'envoi de l'e-mail : {ex.Message}";
        }
    }

    public class EmailModel
    {
        [Required(ErrorMessage = "L'adresse e-mail est requise.")]
        [EmailAddress(ErrorMessage = "Adresse e-mail invalide.")]
        public string RecipientEmail { get; set; }

        [Required(ErrorMessage = "Le sujet est requis.")]
        public string Subject { get; set; }

        [Required(ErrorMessage = "Le message est requis.")]
        public string Message { get; set; }
    }
}
